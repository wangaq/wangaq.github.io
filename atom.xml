<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W.A.Q</title>
  <subtitle>生活不止眼前的苟且 还有诗和远方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-05-12T06:33:07.424Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wang A.Q</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Async  异步流程控制</title>
    <link href="http://yoursite.com/2016/05/12/Async%20%20%E5%BC%82%E6%AD%A5%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>http://yoursite.com/2016/05/12/Async  异步流程控制/</id>
    <published>2016-05-12T06:30:52.958Z</published>
    <updated>2016-05-12T06:33:07.424Z</updated>
    
    <content type="html">&lt;h1 id=&quot;流程控制&quot;&gt;&lt;a href=&quot;#流程控制&quot; class=&quot;headerlink&quot; title=&quot;流程控制&quot;&gt;&lt;/a&gt;流程控制&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.集合: Collections&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.流程控制: Control Flow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.工具类: Utils&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;集合-Collections&quot;&gt;&lt;a href=&quot;#集合-Collections&quot; class=&quot;headerlink&quot; title=&quot;集合: Collections&quot;&gt;&lt;/a&gt;集合: Collections&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   * each: 如果想对同一个集合中的所有元素都执行同一个异步操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* map: 对集合中的每一个元素，执行某个异步操作，得到结果。所有的结果将汇总到最终的callback里。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 与each的区别是，each只关心操作不管最后的值，而map关心的最后产生的值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* filter: 使用异步操作对集合中的元素进行筛选, 需要注意的是，iterator的callback只有一个参数，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 只能接收true或false。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* reject: reject跟filter正好相反，当测试为true时则抛弃&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* reduce: 可以让我们给定一个初始值，用它与集合中的每一个元素做运算，最后得到一个值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* reduce从左向右来遍历元素，如果想从右向左，可使用reduceRight。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* detect: 用于取得集合中满足条件的第一个元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* sortBy: 对集合内的元素进行排序，依据每个元素进行某异步操作后产生的值，从小到大排序。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* some: 当集合中是否有至少一个元素满足条件时，最终callback得到的值为true，否则为false.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* every: 如果集合里每一个元素都满足条件，则传给最终回调的result为true，否则为false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* concat: 将多个异步操作的结果合并为一个数组。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;流程控制-Control-Flow&quot;&gt;&lt;a href=&quot;#流程控制-Control-Flow&quot; class=&quot;headerlink&quot; title=&quot;流程控制: Control Flow&quot;&gt;&lt;/a&gt;流程控制: Control Flow&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* series: 串行执行，一个函数数组中的每个函数，每一个函数执行完成之后才能执行下一个函数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* parallel: 并行执行多个函数，每个函数都是立即执行，不需要等待其它函数先执行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 传给最终callback的数组中的数据按照tasks中声明的顺序，而不是执行完成的顺序。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* whilst: 相当于while，但其中的异步调用将在完成后才会进行下一次循环。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* doWhilst: 相当于do…while, doWhilst交换了fn,test的参数位置，先执行一次循环，再做test判断。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* until: until与whilst正好相反，当test为false时循环，与true时跳出。其它特性一致。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* doUntil: doUntil与doWhilst正好相反，当test为false时循环，与true时跳出。其它特性一致。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* forever: 无论条件循环执行，如果不出错，callback永远不被执行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* waterfall: 按顺序依次执行一组函数。每个函数产生的值，都将传给下一个。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* compose: 创建一个包括一组异步函数的函数集合，每个函数会消费上一次函数的返回值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 把f(),g(),h()异步函数，组合成f(g(h()))的形式，通过callback得到返回值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* applyEach: 实现给一数组中每个函数传相同参数，通过callback返回。如果只传第一个参数，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 将返回一个函数对象，我可以传参调用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* queue: 是一个串行的消息队列，通过限制了worker数量，不再一次性全部执行。当worker数量不够用时，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 新加入的任务将会排队等候，直到有新的worker可用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* cargo: 一个串行的消息队列，类似于queue，通过限制了worker数量，不再一次性全部执行。不同之处在于，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* cargo每次会加载满额的任务做为任务单元，只有任务单元中全部执行完成后，才会加载新的任务单元。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* auto: 用来处理有依赖关系的多个任务的执行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* iterator: 将一组函数包装成为一个iterator，初次调用此iterator时，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 会执行定义中的第一个函数并返回第二个函数以供调用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* apply: 可以让我们给一个函数预绑定多个参数并生成一个可直接调用的新函数，简化代码。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* nextTick: 与nodejs的nextTick一样，再最后调用函数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* times: 异步运行,times可以指定调用几次，并把结果合并到数组中返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* timesSeries: 与time类似，唯一不同的是同步执行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;工具类-Utils&quot;&gt;&lt;a href=&quot;#工具类-Utils&quot; class=&quot;headerlink&quot; title=&quot;工具类: Utils&quot;&gt;&lt;/a&gt;工具类: Utils&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* memoize: 让某一个函数在内存中缓存它的计算结果。对于相同的参数，只计算一次，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 下次就直接拿到之前算好的结果。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* unmemoize: 让已经被缓存的函数，返回不缓存的函数引用。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* log: 执行某异步函数，并记录它的返回值，日志输出。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* dir: 与log类似，不同之处在于，会调用浏览器的console.dir()函数，显示为DOM视图。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* noConflict: 如果之前已经在全局域中定义了async变量，当导入本async.js时，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 会先把之前的async变量保存起来，然后覆盖它。仅仅用于浏览器端，在nodejs中没用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;DEMO&quot;&gt;&lt;a href=&quot;#DEMO&quot; class=&quot;headerlink&quot; title=&quot;DEMO&quot;&gt;&lt;/a&gt;DEMO&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;https://github.com/bsspirit/async_demo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;流程控制&quot;&gt;&lt;a href=&quot;#流程控制&quot; class=&quot;headerlink&quot; title=&quot;流程控制&quot;&gt;&lt;/a&gt;流程控制&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.集合: Collections&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.流程控制: Control Flow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.工具类: Utils&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="nodeJS" scheme="http://yoursite.com/tags/nodeJS/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 设计模式</title>
    <link href="http://yoursite.com/2016/04/25/JAVA%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/04/25/JAVA 设计模式/</id>
    <published>2016-04-25T05:30:06.857Z</published>
    <updated>2016-04-25T08:20:59.724Z</updated>
    
    <content type="html">&lt;h3 id=&quot;观察者模式-Observer&quot;&gt;&lt;a href=&quot;#观察者模式-Observer&quot; class=&quot;headerlink&quot; title=&quot;观察者模式 Observer&quot;&gt;&lt;/a&gt;观察者模式 Observer&lt;/h3&gt;&lt;p&gt; 观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。&lt;/p&gt;
&lt;p&gt; 这个主题对象在状态上发生变化时，会通知所有观察者对象，让它们能够自动更新自己。&lt;/p&gt;
&lt;h3 id=&quot;观察者模式的组成&quot;&gt;&lt;a href=&quot;#观察者模式的组成&quot; class=&quot;headerlink&quot; title=&quot;观察者模式的组成&quot;&gt;&lt;/a&gt;观察者模式的组成&lt;/h3&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt; &lt;strong&gt;抽象主题角色&lt;/strong&gt;：把所有对观察者对象的引用保存在一个集合中，每个抽象主题角色都可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者角色。一般用一个抽象类和接口来实现。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;抽象观察者角色&lt;/strong&gt;：为所有具体的观察者定义一个接口，在得到主题的通知时更新自己。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;具体主题角色&lt;/strong&gt;：在具体主题内部状态改变时，给所有登记过的观察者发出通知。具体主题角色通常用一个子类实现。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;具体观察者角色&lt;/strong&gt;：该角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相协调。通常用一个子类实现。如果需要，具体观察者角色可以保存一个指向具体主题角色的引用。&lt;/p&gt;
&lt;h3 id=&quot;程序实例&quot;&gt;&lt;a href=&quot;#程序实例&quot; class=&quot;headerlink&quot; title=&quot;程序实例&quot;&gt;&lt;/a&gt;程序实例&lt;/h3&gt;&lt;p&gt; 通过程序实例来说明观察者模式：&lt;/p&gt;
&lt;p&gt;首先定义抽象的观察者：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//抽象观察者角色public interface Watcher
{
    public void update(String str);

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 然后定义抽象的主题角色，即抽象的被观察者，在其中声明方法（添加、移除观察者，通知观察者）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//抽象主题角色，watched：被观察public interface Watched
{
    public void addWatcher(Watcher watcher);

    public void removeWatcher(Watcher watcher);

    public void notifyWatchers(String str);

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 然后定义具体的观察者：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ConcreteWatcher implements Watcher
{

    @Override
    public void update(String str)
    {
        System.out.println(str);
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 之后是具体的主题角色：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import java.util.ArrayList;
import java.util.List;

public class ConcreteWatched implements Watched
{
    // 存放观察者
    private List&amp;lt;Watcher&amp;gt; list = new ArrayList&amp;lt;Watcher&amp;gt;();

    @Override
    public void addWatcher(Watcher watcher)
    {
        list.add(watcher);
    }

    @Override
    public void removeWatcher(Watcher watcher)
    {
        list.remove(watcher);
    }

    @Override
    public void notifyWatchers(String str)
    {
        // 自动调用实际上是主题进行调用的
        for (Watcher watcher : list)
        {
            watcher.update(str);
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 编写测试类：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; public  class Test  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public  static  void main(String[] args)  &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Watched girl = new ConcreteWatched();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Watcher watcher1 = new ConcreteWatcher();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Watcher watcher2 = new ConcreteWatcher();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Watcher watcher3 = new ConcreteWatcher();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    girl.addWatcher(watcher1);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    girl.addWatcher(watcher2);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    girl.addWatcher(watcher3);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    girl.notifyWatchers( &amp;quot;开心&amp;quot; );  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;观察者模式-Observer&quot;&gt;&lt;a href=&quot;#观察者模式-Observer&quot; class=&quot;headerlink&quot; title=&quot;观察者模式 Observer&quot;&gt;&lt;/a&gt;观察者模式 Observer&lt;/h3&gt;&lt;p&gt; 观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。&lt;/p&gt;
&lt;p&gt; 这个主题对象在状态上发生变化时，会通知所有观察者对象，让它们能够自动更新自己。&lt;/p&gt;
&lt;h3 id=&quot;观察者模式的组成&quot;&gt;&lt;a href=&quot;#观察者模式的组成&quot; class=&quot;headerlink&quot; title=&quot;观察者模式的组成&quot;&gt;&lt;/a&gt;观察者模式的组成&lt;/h3&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo学习</title>
    <link href="http://yoursite.com/2016/04/23/Hexo%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/04/23/Hexo学习/</id>
    <published>2016-04-23T08:29:13.925Z</published>
    <updated>2016-04-25T08:20:14.497Z</updated>
    
    <content type="html">&lt;h3 id=&quot;构造流程……&quot;&gt;&lt;a href=&quot;#构造流程……&quot; class=&quot;headerlink&quot; title=&quot;构造流程……&quot;&gt;&lt;/a&gt;构造流程……&lt;/h3&gt;&lt;p&gt;1.&lt;strong&gt;新建文件夹，Git Shell 进入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;strong&gt;创建&lt;/strong&gt; &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-cli -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.&lt;strong&gt;部署&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init、npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4.&lt;strong&gt;将其 deploy 到仓库中&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo clean、hexo generate、hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;构造流程……&quot;&gt;&lt;a href=&quot;#构造流程……&quot; class=&quot;headerlink&quot; title=&quot;构造流程……&quot;&gt;&lt;/a&gt;构造流程……&lt;/h3&gt;&lt;p&gt;1.&lt;strong&gt;新建文件夹，Git Shell 进入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;strong&gt;创建&lt;/strong&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
